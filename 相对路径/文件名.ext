from typing import Callable, List, Optional, Sequence, TYPE_CHECKING, Union

if TYPE_CHECKING:
    from core.repository import ClipRepository

TextProvider = Callable[[], Optional[Union[str, bytes]]]


def _as_str(value: Optional[Union[str, bytes]]) -> Optional[str]:
    if value is None:
        return None
    if isinstance(value, str):
        return value
    if isinstance(value, (bytes, bytearray)):
        try:
            return bytes(value).decode("utf-8", errors="ignore")
        except Exception:
            return None
    return None


def _provider_android() -> Optional[str]:
    """
    Try to read clipboard via Android ClipboardManager using pyjnius.
    Returns None if environment or access is not available.
    """
    try:
        from jnius import autoclass  # type: ignore
    except Exception:
        return None

    try:
        PythonActivity = autoclass("org.kivy.android.PythonActivity")
        Context = autoclass("android.content.Context")
        activity = PythonActivity.mActivity
        clipboard = activity.getSystemService(Context.CLIPBOARD_SERVICE)
        if clipboard is None:
            return None
        if not clipboard.hasPrimaryClip():
            return None
        clip = clipboard.getPrimaryClip()
        if clip is None or clip.getItemCount() <= 0:
            return None
        item = clip.getItemAt(0)
        txt = item.getText()
        if txt is not None:
            s = _as_str(str(txt))
            return s if s else None
        coerced = item.coerceToText(activity)
        if coerced is not None:
            s = _as_str(str(coerced))
            return s if s else None
    except Exception:
        return None
    return None


def _provider_kivy() -> Optional[str]:
    """
    Try to read clipboard via Kivy Clipboard.
    Returns None if not available or clipboard empty.
    """
    try:
        from kivy.core.clipboard import Clipboard  # type: ignore
    except Exception:
        return None

    try:
        value = Clipboard.paste()
        s = _as_str(value)
        return s if s else None
    except Exception:
        return None


def _provider_pyperclip() -> Optional[str]:
    """
    Try to read clipboard via pyperclip.
    Returns None if not available or clipboard empty.
    """
    try:
        import pyperclip  # type: ignore
    except Exception:
        return None

    try:
        value = pyperclip.paste()
        s = _as_str(value)
        return s if s else None
    except Exception:
        return None


def default_providers() -> List[TextProvider]:
    return [_provider_android, _provider_kivy, _provider_pyperclip]


def get_clipboard_text_from_providers(providers: Sequence[TextProvider]) -> Optional[str]:
    """
    Iterate providers and return the first non-empty string.
    Silently ignores provider exceptions.
    """
    for prov in providers:
        try:
            value = prov()
        except Exception:
            continue
        s = _as_str(value)
        if s is not None and s != "":
            return s
    return None


def get_clipboard_text() -> Optional[str]:
    """
    Read clipboard text using platform-specific providers.
    Returns None if not available.
    """
    return get_clipboard_text_from_providers(default_providers())


def ingest_clipboard_once(repo: "ClipRepository", reader: Optional[Callable[[], Optional[str]]] = None):
    """
    Read clipboard once and insert/touch repository.
    - Skips None or empty string.
    - Returns row dict if added/touched, else None.
    """
    read = reader or get_clipboard_text
    try:
        text = read()
    except Exception:
        return None
    if not isinstance(text, str) or text == "":
        return None
    return repo.add_text(text)