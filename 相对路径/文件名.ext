# -*- coding: utf-8 -*-
import importlib.util
import os
import unittest


def _load_module_from_path(path: str):
    if not os.path.exists(path):
        return None
    name = os.path.splitext(os.path.basename(path))[0]
    spec = importlib.util.spec_from_file_location(name, path)
    if spec is None or spec.loader is None:
        return None
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)  # type: ignore[attr-defined]
    return module


def load_tests(loader, tests, pattern):  # unittest protocol
    suite = unittest.TestSuite()
    for path in ("tests/test_history.py", "tests/test_storage.py"):
        mod = _load_module_from_path(path)
        if mod is not None:
            suite.addTests(loader.loadTestsFromModule(mod))
    return suite