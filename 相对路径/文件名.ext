from typing import Optional
from core.storage import ClipboardStorage


def enforce_max_items(
    storage: ClipboardStorage,
    max_items: Optional[int],
    include_pinned_in_limit: bool = False,
) -> int:
    """
    Enforce a maximum number of items in storage.
    - If max_items is None or <= 0, no action is taken.
    - Pinned items are never deleted.
    - If include_pinned_in_limit is False (default): keep up to max_items unpinned items
      in addition to all pinned items.
    - If include_pinned_in_limit is True: keep up to max_items total items by limiting
      the number of unpinned items to (max_items - pinned_count), but still never delete pinned.
      If pinned_count > max_items, no unpinned items are kept.
    Returns number of rows deleted.
    """
    if max_items is None:
        return 0
    try:
        limit = int(max_items)
    except Exception:
        return 0
    if limit <= 0:
        return 0

    rows = storage.list_all()
    pinned = [r for r in rows if r["pinned"]]
    unpinned = [r for r in rows if not r["pinned"]]

    if include_pinned_in_limit:
        keep_unpinned = max(0, limit - len(pinned))
    else:
        keep_unpinned = limit

    # unpinned are already ordered by created_at desc, id desc via list_all()
    to_delete = unpinned[keep_unpinned:]
    deleted = 0
    for r in to_delete:
        if storage.delete(int(r["id"])):
            deleted += 1
    return deleted